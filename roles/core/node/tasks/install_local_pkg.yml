---
# Local package installation method

- block:  ## run_once: true
    - name: "install | Check if local installation package exists in:  {{ scale_install_localpkg_path }}"
      stat:
        path: "{{ scale_install_localpkg_path }}"
      register: scale_install_localpkg

    - name: install | Check local installation package
      assert:
        that: scale_install_localpkg.stat.exists
        msg: >-
          Please set the variable 'scale_install_localpkg_path' to point to the
          local installation package (accessible on Ansible control machine)!

#
# Optionally, verify package checksum
#
    - name: install | Stat checksum file
      stat:
        path: "{{ scale_install_localpkg_path }}.md5"
      register: scale_install_md5_file

    - block:  ## when: scale_install_md5_file.stat.exists
        - name: install | Read checksum from file
          set_fact:
            scale_install_md5_sum: "{{ lookup('file', scale_install_localpkg_path + '.md5') }}"

        - name: install | Compare checksums
          assert:
            that: scale_install_md5_sum.strip().split().0 == scale_install_localpkg.stat.md5
            msg: >-
              Checksums don't match. Please check integritiy of your local
              installation package!
      when: scale_install_md5_file.stat.exists
  run_once: true
  delegate_to: localhost

#
# Copy installation package
#
- name: "install | Set variables based on yum-based OS"
  include: yum.yml
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

- name: "install | set variables based on Debian"
  include: apt.yml
  when: ansible_distribution == 'Debian'

- name: VKHU_DEBUG print out scale_architecture
  debug:
    msg: "{{ scale_architecture }}"

- name: VKHU_DEBUG print ansible_distribution
  debug:
    msg: "{{ ansible_distribution }} and {{ ansible_distribution_major_version }}"


- block:  ## when: not scale_install_gpfs_pkgdir.stat.exists
    - name: install | Stat temporary directory
      stat:
        path: "{{ scale_install_localpkg_tmpdir_path }}"
      register: scale_install_localpkg_tmpdir

    - name: install | Check temporary directory
      assert:
        that:
          - scale_install_localpkg_tmpdir.stat.exists
          - scale_install_localpkg_tmpdir.stat.isdir
        msg: >-
          Please set the variable 'scale_install_localpkg_tmpdir_path' to point
          to a temporary directory on the remote system!

    - name: install | Copy installation package to node
      copy:
        src: "{{ scale_install_localpkg_path }}"
        dest: "{{ scale_install_localpkg_tmpdir_path }}"
        mode: a+x
  when: not scale_install_gpfs_pkgdir.stat.exists

#
# Extract installation package
#
- name: install | Extract installation package
  vars:
    localpkg: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
  command: "{{ localpkg + ' --silent' }}"
  args:
    creates: "{{ scale_install_localpkg_path }}"

- name: install | Stat extracted packages
  stat:
    path: "{{ scale_install_gpfs_pkgdir_name }}"
  register: scale_install_gpfs_pkgdir

- name: DEBUG print out the path
  debug:
    msg: "{{ scale_install_gpfs_pkgdir }}.stat.path"

- name: install | Check extracted packages
  assert:
    that:
      - scale_install_gpfs_pkgdir.stat.exists
      - scale_install_gpfs_pkgdir.stat.isdir
    msg: >-
      The variable 'scale_version' doesn't seem to match the contents of the
      local installation package!

#
# Delete installation package
#
# VKHU_DEBUG - uncomment this later , undo...
# - name: install | Delete installation package from node
#   file:
#     path: "{{ scale_install_localpkg_tmpdir_path + '/' + scale_install_localpkg_path | basename }}"
#     state: absent

#
# Find GPFS BASE
#
- name: install | Find GPFS BASE (gpfs.base) Packages
  find:
    paths: "{{ scale_install_gpfs_pkgdir_name }}"
    patterns: gpfs.base*{{ scale_architecture }}*
  register: scale_install_gpfs_base

- name: VKHU_DEBUG - print the pkg name.. 
  debug:
    msg: "{{ scale_install_gpfs_base }}"

- name: install | Check valid GPFS BASE (gpfs.base) Packages
  assert:
    that: scale_install_gpfs_base.matched > 0
    msg: >-
      No GPFS BASE (gpfs.base) Package found in {{ scale_install_gpfs_pkgdir_name }}/


#
# Find GPFS gpfs.docs
#
- name: install | Find GPFS docs (gpfs.docs) Packages
  find:
    paths: "{{ scale_install_gpfs_pkgdir_name }}"
    patterns: gpfs.docs*
  register: scale_install_gpfs_doc

- name: install | Check valid GPFS docs (gpfs.docs) Packages
  assert:
    that: scale_install_gpfs_doc.matched > 0
    msg: >-
      No GPFS docs (gpfs.docs) Package found in {{ scale_install_gpfs_pkgdir_name }}/

#
# Find GPFS gpfs.msg.en_US
#
- name: install | Find GPFS msg (gpfs.msg.en) Packages
  find:
    paths: "{{ scale_install_gpfs_pkgdir_name }}"
    patterns: gpfs.msg.en*
  register: scale_install_gpfs_msg

- name: install | Check valid GPFS msg (gpfs.msg.en) Packages
  assert:
    that: scale_install_gpfs_msg.matched > 0
    msg: >-
      No GPFS BASE (gpfs.base) Package found in {{ scale_install_gpfs_pkgdir_name }}/

#
# Find GPFS gpfs.compression
#
- name: install | Find GPFS Compression (gpfs.compression) Packages
  find:
    paths: "{{ scale_install_gpfs_pkgdir_name }}"
    patterns: gpfs.compression*{{ scale_architecture }}*
  register: scale_install_gpfs_compression

- name: install | Check valid GPFS Compression(gpfs.compression) Packages
  assert:
    that: scale_install_gpfs_compression.matched > 0
    msg: >-
      No GPFS Compression (gpfs.compression) Package found in {{ scale_install_gpfs_pkgdir_name }}/

#
# Find GSKit
#
- name: install | Find Global Security Kit (GSKit) Packages
  find:
    paths: "{{ scale_install_gpfs_pkgdir_name }}"
    patterns: gpfs.gskit*{{ scale_architecture }}*
  register: scale_install_gpfs_gskit

- name: install | Check valid Global Security Kit (GSKit) Packages
  assert:
    that: scale_install_gpfs_gskit.matched > 0
    msg: >-
      No Global Security Kit (GSKit) Package found in {{ scale_install_gpfs_pkgdir_name }}/

#
# Add GPFS RPMs
#
- name: install | Add GPFS Packages to list
  vars:
    current_rpm: "{{ scale_install_gpfs_pkgdir_name }}/{{ item }}"
  set_fact:
    scale_install_all_pkgs: "{{ scale_install_all_pkgs + [ current_rpm ] }}"
  with_items:
    - "{{ scale_install_gpfs_base.files.0.path | basename }}"
    - "{{ scale_install_gpfs_doc.files.0.path | basename }}"
    - "{{ scale_install_gpfs_msg.files.0.path | basename }}"
    - "{{ scale_install_gpfs_gskit.files.0.path | basename }}"
    - "{{ scale_install_gpfs_compression.files.0.path | basename }}"

- name: install | Add GPFS Packages to list (prior to version 5.0.2.0)
  vars:
    current_rpm: "{{ scale_install_gpfs_pkgdir_name }}/{{ item }}"
  set_fact:
    scale_install_all_pkgs: "{{ scale_install_all_pkgs + [ current_rpm ] }}"
  with_items:
    - "{{ scale_install_add_rpms_pre502 }}"
  when: scale_version is version_compare('5.0.2', '<=')

#
# Add GPFS RPMs for building GPL module from source
#

- name: install | Find GPFS gpl (gpfs.gpl) Package
  find:
    paths: "{{ scale_install_gpfs_pkgdir_name }}"
    patterns: gpfs.gpl*
  register: scale_install_gpfs_gpl

- name: install | Check valid GPFS GPL (gpfs.gpl) Package
  assert:
    that: scale_install_gpfs_gpl.matched > 0
    msg: >-
      No GPFS GPL (gpfs.gpl) Package found in {{ scale_install_gpfs_pkgdir_name }}/

- name: install | Add GPFS RPMs for building GPL module from source to list
  vars:
    current_rpm: "{{ scale_install_gpfs_pkgdir_name }}/{{ item }}"
  set_fact:
    scale_install_all_pkgs: "{{ scale_install_all_pkgs + [ current_rpm ] }}"
  when: scale_install_gplbin_rpm is undefined
  with_items: "{{ scale_install_gpfs_gpl.files.0.path | basename }}"

- name: VKHU_DEBUG - print out all packages
  debug:
    msg: "{{ scale_install_all_pkgs }}"